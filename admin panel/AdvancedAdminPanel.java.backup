import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.*;
import java.util.List;
import java.util.Timer;
import org.json.*;

public class AdvancedAdminPanel extends JFrame {
    private static final String SERVER_URL = "http://192.168.89.31:3000";
    
    // Modern UI Colors
    private static final Color PRIMARY = new Color(99, 102, 241);
    private static final Color SUCCESS = new Color(16, 185, 129);
    private static final Color ERROR = new Color(239, 68, 68);
    private static final Color WARNING = new Color(245, 158, 11);
    private static final Color INFO = new Color(59, 130, 246);
    private static final Color BG = new Color(249, 250, 251);
    private static final Color CARD = Color.WHITE;
    private static final Color TEXT = new Color(31, 41, 55);
    
    private JPanel mainPanel, contentPanel;
    private CardLayout cardLayout, contentLayout;
    private JLabel statusLabel, connectedCountLabel, serverStatusLabel;
    private JTextArea logArea;
    private Timer refreshTimer;
    private boolean isConnected = false;
    
    public AdvancedAdminPanel() {
        initializeUI();
        testConnection();
        startAutoRefresh();
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {}
            new AdvancedAdminPanel().setVisible(true);
        });
    }
    
    private void initializeUI() {
        setTitle("LetsBunk Advanced Admin Panel - Complete Management System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(1600, 900);
        setLocationRelativeTo(null);
        
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);
        mainPanel.setBackground(BG);
        
        createDashboardPanel();
        add(mainPanel);
        cardLayout.show(mainPanel, "DASHBOARD");
    }
    
    private void createDashboardPanel() {
        JPanel dashboard = new JPanel(new BorderLayout(10, 10));
        dashboard.setBackground(BG);
        dashboard.setBorder(new EmptyBorder(15, 15, 15, 15));
        
        dashboard.add(createHeaderPanel(), BorderLayout.NORTH);
        
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        splitPane.setLeftComponent(createSidebarPanel());
        splitPane.setRightComponent(createMainContentPanel());
        splitPane.setDividerLocation(280);
        splitPane.setBorder(null);
        dashboard.add(splitPane, BorderLayout.CENTER);
        
        dashboard.add(createStatusBar(), BorderLayout.SOUTH);
        
        mainPanel.add(dashboard, "DASHBOARD");
    }
    
    private JPanel createHeaderPanel() {
        JPanel header = new JPanel(new BorderLayout());
        header.setBackground(PRIMARY);
        header.setBorder(new EmptyBorder(20, 25, 20, 25));
        
        JLabel title = new JLabel("LetsBunk Advanced Admin Panel");
        title.setFont(new Font("Segoe UI", Font.BOLD, 28));
        title.setForeground(Color.WHITE);
        
        JPanel statusPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 15, 0));
        statusPanel.setBackground(PRIMARY);
        
        serverStatusLabel = new JLabel("* Connecting...");
        serverStatusLabel.setFont(new Font("Segoe UI", Font.BOLD, 14));
        serverStatusLabel.setForeground(Color.WHITE);
        
        connectedCountLabel = new JLabel("0 Students Online");
        connectedCountLabel.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        connectedCountLabel.setForeground(Color.WHITE);
        
        statusPanel.add(serverStatusLabel);
        statusPanel.add(new JLabel(" | ") {{ setForeground(Color.WHITE); }});
        statusPanel.add(connectedCountLabel);
        
        header.add(title, BorderLayout.WEST);
        header.add(statusPanel, BorderLayout.EAST);
        
        return header;
    }
    
    private JPanel createSidebarPanel() {
        JPanel sidebar = new JPanel();
        sidebar.setLayout(new BoxLayout(sidebar, BoxLayout.Y_AXIS));
        sidebar.setBackground(CARD);
        sidebar.setBorder(new CompoundBorder(
            new MatteBorder(0, 0, 0, 1, new Color(229, 231, 235)),
            new EmptyBorder(15, 10, 15, 10)
        ));
        
        // Profile Management
        sidebar.add(createSectionLabel("PROFILE MANAGEMENT"));
        sidebar.add(createMenuButton("Create Student Profile", e -> showCreateStudentProfile()));
        sidebar.add(createMenuButton("Create Teacher Profile", e -> showCreateTeacherProfile()));
        sidebar.add(createMenuButton("View All Students", e -> showAllStudents()));
        sidebar.add(createMenuButton("View All Teachers", e -> showAllTeachers()));
        sidebar.add(createMenuButton("Edit Student Info", e -> showEditStudent()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // Timetable Management
        sidebar.add(createSectionLabel("TIMETABLE MANAGEMENT"));
        sidebar.add(createMenuButton("Create Timetable", e -> showCreateTimetable()));
        sidebar.add(createMenuButton("Assign Classrooms", e -> showAssignClassrooms()));
        sidebar.add(createMenuButton("Teacher Permissions", e -> showTeacherPermissions()));
        sidebar.add(createMenuButton("View Timetables", e -> showViewTimetables()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // Attendance & Monitoring
        sidebar.add(createSectionLabel("ATTENDANCE"));
        sidebar.add(createMenuButton("Live Monitoring", e -> showLiveMonitoring()));
        sidebar.add(createMenuButton("View Records", e -> showAttendanceRecords()));
        sidebar.add(createMenuButton("Generate Reports", e -> showGenerateReports()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // WiFi & Location
        sidebar.add(createSectionLabel("WIFI & LOCATION"));
        sidebar.add(createMenuButton("Set BSSID", e -> showSetBSSID()));
        sidebar.add(createMenuButton("Classroom WiFi Map", e -> showClassroomWiFiMap()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // Communication
        sidebar.add(createSectionLabel("COMMUNICATION"));
        sidebar.add(createMenuButton("Post Notice", e -> showPostNotice()));
        sidebar.add(createMenuButton("View Notices", e -> showViewNotices()));
        sidebar.add(createMenuButton("Community Forum", e -> showCommunityForum()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // Library & Resources
        sidebar.add(createSectionLabel("LIBRARY"));
        sidebar.add(createMenuButton("Library Access", e -> showLibraryAccess()));
        sidebar.add(createMenuButton("Resource Management", e -> showResourceManagement()));
        sidebar.add(Box.createVerticalStrut(10));
        
        // System
        sidebar.add(createSectionLabel("SYSTEM"));
        sidebar.add(createMenuButton("Statistics", e -> showStatistics()));
        sidebar.add(createMenuButton("Settings", e -> showSettings()));
        sidebar.add(createMenuButton("Refresh All", e -> refreshAll()));
        sidebar.add(Box.createVerticalGlue());
        sidebar.add(createMenuButton("Exit", e -> System.exit(0)));
        
        JScrollPane scrollPane = new JScrollPane(sidebar);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        
        JPanel wrapper = new JPanel(new BorderLayout());
        wrapper.add(scrollPane, BorderLayout.CENTER);
        return wrapper;
    }
    
    private JLabel createSectionLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Segoe UI", Font.BOLD, 11));
        label.setForeground(TEXT);
        label.setBorder(new EmptyBorder(10, 5, 5, 5));
        label.setAlignmentX(Component.LEFT_ALIGNMENT);
        return label;
    }
    
    private JButton createMenuButton(String text, ActionListener action) {
        JButton btn = new JButton(text);
        btn.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        btn.setForeground(TEXT);
        btn.setBackground(CARD);
        btn.setBorder(new EmptyBorder(10, 15, 10, 15));
        btn.setFocusPainted(false);
        btn.setHorizontalAlignment(SwingConstants.LEFT);
        btn.setMaximumSize(new Dimension(Integer.MAX_VALUE, 40));
        btn.setCursor(new Cursor(Cursor.HAND_CURSOR));
        btn.setAlignmentX(Component.LEFT_ALIGNMENT);
        btn.addActionListener(action);
        
        btn.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btn.setBackground(new Color(243, 244, 246));
            }
            public void mouseExited(MouseEvent e) {
                btn.setBackground(CARD);
            }
        });
        
        return btn;
    }
    
    private JPanel createMainContentPanel() {
        contentLayout = new CardLayout();
        contentPanel = new JPanel(contentLayout);
        contentPanel.setBackground(BG);
        
        // Add all content panels
        contentPanel.add(createWelcomePanel(), "WELCOME");
        
        return contentPanel;
    }
    
    private JPanel createWelcomePanel() {
        JPanel panel = new JPanel(new BorderLayout());
        panel.setBackground(BG);
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JLabel welcome = new JLabel("<html><h1>Welcome to LetsBunk Advanced Admin Panel</h1>" +
            "<p>Select an option from the sidebar to get started.</p></html>");
        welcome.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        
        logArea = new JTextArea(20, 0);
        logArea.setFont(new Font("Consolas", Font.PLAIN, 12));
        logArea.setEditable(false);
        logArea.setBackground(new Color(31, 41, 55));
        logArea.setForeground(new Color(209, 213, 219));
        logArea.setBorder(new EmptyBorder(10, 10, 10, 10));
        
        JScrollPane logScroll = new JScrollPane(logArea);
        logScroll.setBorder(BorderFactory.createTitledBorder("Activity Log"));
        
        panel.add(welcome, BorderLayout.NORTH);
        panel.add(logScroll, BorderLayout.CENTER);
        
        return panel;
    }
    
    private JPanel createStatusBar() {
        JPanel statusBar = new JPanel(new FlowLayout(FlowLayout.LEFT));
        statusBar.setBackground(new Color(243, 244, 246));
        statusBar.setBorder(new EmptyBorder(5, 10, 5, 10));
        
        statusLabel = new JLabel("Ready");
        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        statusBar.add(statusLabel);
        
        return statusBar;
    }
    
    // ========== PROFILE MANAGEMENT ==========
    
    private void showCreateStudentProfile() {
        JDialog dialog = new JDialog(this, "Create Student Profile", true);
        dialog.setSize(600, 700);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        // Student Information Fields
        JTextField studentIdField = new JTextField(20);
        JTextField nameField = new JTextField(20);
        JTextField emailField = new JTextField(20);
        JTextField phoneField = new JTextField(20);
        JComboBox<String> branchCombo = new JComboBox<>(new String[]{"CSE", "ECE", "ME", "CE", "EE", "IT"});
        JSpinner semesterSpinner = new JSpinner(new SpinnerNumberModel(1, 1, 8, 1));
        JTextField rollNoField = new JTextField(20);
        JTextField batchField = new JTextField(20);
        JTextField parentNameField = new JTextField(20);
        JTextField parentPhoneField = new JTextField(20);
        JTextField addressField = new JTextField(20);
        JPasswordField passwordField = new JPasswordField(20);
        
        int row = 0;
        addFormField(panel, gbc, row++, "Student ID:", studentIdField);
        addFormField(panel, gbc, row++, "Full Name:", nameField);
        addFormField(panel, gbc, row++, "Email:", emailField);
        addFormField(panel, gbc, row++, "Phone:", phoneField);
        addFormField(panel, gbc, row++, "Branch:", branchCombo);
        addFormField(panel, gbc, row++, "Semester:", semesterSpinner);
        addFormField(panel, gbc, row++, "Roll Number:", rollNoField);
        addFormField(panel, gbc, row++, "Batch:", batchField);
        addFormField(panel, gbc, row++, "Parent Name:", parentNameField);
        addFormField(panel, gbc, row++, "Parent Phone:", parentPhoneField);
        addFormField(panel, gbc, row++, "Address:", addressField);
        addFormField(panel, gbc, row++, "Password:", passwordField);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton createBtn = createStyledButton("Create Profile", SUCCESS);
        JButton cancelBtn = createStyledButton("Cancel", ERROR);
        
        createBtn.addActionListener(e -> {
            JSONObject student = new JSONObject();
            student.put("studentId", studentIdField.getText());
            student.put("name", nameField.getText());
            student.put("email", emailField.getText());
            student.put("phone", phoneField.getText());
            student.put("branch", branchCombo.getSelectedItem());
            student.put("semester", semesterSpinner.getValue());
            student.put("rollNo", rollNoField.getText());
            student.put("batch", batchField.getText());
            student.put("parentName", parentNameField.getText());
            student.put("parentPhone", parentPhoneField.getText());
            student.put("address", addressField.getText());
            student.put("password", new String(passwordField.getPassword()));
            student.put("role", "student");
            student.put("createdAt", new Date().toString());
            
            createProfile(student, "student");
            dialog.dispose();
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        btnPanel.add(createBtn);
        btnPanel.add(cancelBtn);
        
        gbc.gridx = 0; gbc.gridy = row; gbc.gridwidth = 2;
        panel.add(btnPanel, gbc);
        
        JScrollPane scrollPane = new JScrollPane(panel);
        dialog.add(scrollPane);
        dialog.setVisible(true);
    }
    
    private void showCreateTeacherProfile() {
        JDialog dialog = new JDialog(this, "Create Teacher Profile", true);
        dialog.setSize(600, 650);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        JTextField teacherIdField = new JTextField(20);
        JTextField nameField = new JTextField(20);
        JTextField emailField = new JTextField(20);
        JTextField phoneField = new JTextField(20);
        JComboBox<String> departmentCombo = new JComboBox<>(new String[]{"CSE", "ECE", "ME", "CE", "EE", "IT", "General"});
        JTextField subjectField = new JTextField(20);
        JTextField qualificationField = new JTextField(20);
        JTextField experienceField = new JTextField(20);
        JCheckBox canEditTimetableCheck = new JCheckBox("Can Edit Timetable");
        JCheckBox canViewAttendanceCheck = new JCheckBox("Can View Attendance");
        JPasswordField passwordField = new JPasswordField(20);
        
        int row = 0;
        addFormField(panel, gbc, row++, "Teacher ID:", teacherIdField);
        addFormField(panel, gbc, row++, "Full Name:", nameField);
        addFormField(panel, gbc, row++, "Email:", emailField);
        addFormField(panel, gbc, row++, "Phone:", phoneField);
        addFormField(panel, gbc, row++, "Department:", departmentCombo);
        addFormField(panel, gbc, row++, "Subject:", subjectField);
        addFormField(panel, gbc, row++, "Qualification:", qualificationField);
        addFormField(panel, gbc, row++, "Experience (years):", experienceField);
        addFormField(panel, gbc, row++, "Password:", passwordField);
        
        gbc.gridx = 0; gbc.gridy = row++; gbc.gridwidth = 2;
        panel.add(canEditTimetableCheck, gbc);
        gbc.gridy = row++;
        panel.add(canViewAttendanceCheck, gbc);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton createBtn = createStyledButton("Create Profile", SUCCESS);
        JButton cancelBtn = createStyledButton("Cancel", ERROR);
        
        createBtn.addActionListener(e -> {
            JSONObject teacher = new JSONObject();
            teacher.put("teacherId", teacherIdField.getText());
            teacher.put("name", nameField.getText());
            teacher.put("email", emailField.getText());
            teacher.put("phone", phoneField.getText());
            teacher.put("department", departmentCombo.getSelectedItem());
            teacher.put("subject", subjectField.getText());
            teacher.put("qualification", qualificationField.getText());
            teacher.put("experience", experienceField.getText());
            teacher.put("password", new String(passwordField.getPassword()));
            teacher.put("canEditTimetable", canEditTimetableCheck.isSelected());
            teacher.put("canViewAttendance", canViewAttendanceCheck.isSelected());
            teacher.put("role", "teacher");
            teacher.put("createdAt", new Date().toString());
            
            createProfile(teacher, "teacher");
            dialog.dispose();
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        btnPanel.add(createBtn);
        btnPanel.add(cancelBtn);
        
        gbc.gridy = row;
        panel.add(btnPanel, gbc);
        
        JScrollPane scrollPane = new JScrollPane(panel);
        dialog.add(scrollPane);
        dialog.setVisible(true);
    }
    
    private void createProfile(JSONObject profile, String type) {
        log("Creating " + type + " profile: " + profile.optString("name"));
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/profiles/" + type, profile.toString());
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        log("Profile created successfully!");
                        JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                            type.toUpperCase() + " profile created successfully!", 
                            "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        log("Failed to create profile");
                        JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                            "Failed to create profile. Check server connection.", 
                            "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showAllStudents() {
        log("Loading all students...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/profiles/students");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        showTableDialog("All Students", response, new String[]{
                            "ID", "Name", "Email", "Branch", "Semester", "Roll No", "Batch"
                        });
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showAllTeachers() {
        log("Loading all teachers...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/profiles/teachers");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        showTableDialog("All Teachers", response, new String[]{
                            "ID", "Name", "Email", "Department", "Subject", "Experience"
                        });
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showEditStudent() {
        String studentId = JOptionPane.showInputDialog(this, "Enter Student ID to edit:");
        if (studentId != null && !studentId.trim().isEmpty()) {
            log("Loading student: " + studentId);
            new SwingWorker<String, Void>() {
                protected String doInBackground() {
                    return sendGetRequest("/api/profiles/student/" + studentId);
                }
                protected void done() {
                    try {
                        String response = get();
                        if (response != null) {
                            JSONObject student = new JSONObject(response);
                            showEditStudentDialog(student);
                        }
                    } catch (Exception e) {
                        log("Error: " + e.getMessage());
                        JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                            "Student not found!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }.execute();
        }
    }
    
    private void showEditStudentDialog(JSONObject student) {
        JDialog dialog = new JDialog(this, "Edit Student: " + student.optString("name"), true);
        dialog.setSize(600, 700);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(8, 8, 8, 8);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        
        JTextField nameField = new JTextField(student.optString("name"), 20);
        JTextField emailField = new JTextField(student.optString("email"), 20);
        JTextField phoneField = new JTextField(student.optString("phone"), 20);
        JComboBox<String> branchCombo = new JComboBox<>(new String[]{"CSE", "ECE", "ME", "CE", "EE", "IT"});
        branchCombo.setSelectedItem(student.optString("branch"));
        JSpinner semesterSpinner = new JSpinner(new SpinnerNumberModel(student.optInt("semester", 1), 1, 8, 1));
        JTextField rollNoField = new JTextField(student.optString("rollNo"), 20);
        JTextField addressField = new JTextField(student.optString("address"), 20);
        
        int row = 0;
        addFormField(panel, gbc, row++, "Name:", nameField);
        addFormField(panel, gbc, row++, "Email:", emailField);
        addFormField(panel, gbc, row++, "Phone:", phoneField);
        addFormField(panel, gbc, row++, "Branch:", branchCombo);
        addFormField(panel, gbc, row++, "Semester:", semesterSpinner);
        addFormField(panel, gbc, row++, "Roll Number:", rollNoField);
        addFormField(panel, gbc, row++, "Address:", addressField);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton saveBtn = createStyledButton("Save Changes", SUCCESS);
        JButton deleteBtn = createStyledButton("Delete Profile", ERROR);
        JButton cancelBtn = createStyledButton("Cancel", WARNING);
        
        saveBtn.addActionListener(e -> {
            student.put("name", nameField.getText());
            student.put("email", emailField.getText());
            student.put("phone", phoneField.getText());
            student.put("branch", branchCombo.getSelectedItem());
            student.put("semester", semesterSpinner.getValue());
            student.put("rollNo", rollNoField.getText());
            student.put("address", addressField.getText());
            
            updateProfile(student, "student");
            dialog.dispose();
        });
        
        deleteBtn.addActionListener(e -> {
            int confirm = JOptionPane.showConfirmDialog(dialog, 
                "Are you sure you want to delete this student profile?", 
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                deleteProfile(student.optString("studentId"), "student");
                dialog.dispose();
            }
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        btnPanel.add(saveBtn);
        btnPanel.add(deleteBtn);
        btnPanel.add(cancelBtn);
        
        gbc.gridx = 0; gbc.gridy = row; gbc.gridwidth = 2;
        panel.add(btnPanel, gbc);
        
        JScrollPane scrollPane = new JScrollPane(panel);
        dialog.add(scrollPane);
        dialog.setVisible(true);
    }
    
    private void updateProfile(JSONObject profile, String type) {
        log("Updating " + type + " profile...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                String id = type.equals("student") ? profile.optString("studentId") : profile.optString("teacherId");
                return sendPutRequest("/api/profiles/" + type + "/" + id, profile.toString());
            }
            protected void done() {
                try {
                    String response = get();
                    log("Profile updated successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Profile updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void deleteProfile(String id, String type) {
        log("Deleting " + type + " profile: " + id);
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendDeleteRequest("/api/profiles/" + type + "/" + id);
            }
            protected void done() {
                try {
                    log("Profile deleted successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Profile deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    // ========== TIMETABLE MANAGEMENT ==========
    
    private void showCreateTimetable() {
        JDialog dialog = new JDialog(this, "Create Timetable", true);
        dialog.setSize(900, 700);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        // Top panel for branch/semester selection
        JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JTextField branchField = new JTextField("CSE", 10);
        JSpinner semesterSpinner = new JSpinner(new SpinnerNumberModel(5, 1, 8, 1));
        
        topPanel.add(new JLabel("Branch:"));
        topPanel.add(branchField);
        topPanel.add(new JLabel("Semester:"));
        topPanel.add(semesterSpinner);
        
        // Timetable grid
        String[] days = {"Period", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
        DefaultTableModel model = new DefaultTableModel(days, 0);
        
        // Add 8 periods
        for (int i = 1; i <= 8; i++) {
            model.addRow(new Object[]{"Period " + i, "", "", "", "", "", ""});
        }
        
        JTable table = new JTable(model);
        table.setRowHeight(40);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(table);
        
        // Button panel
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton saveBtn = createStyledButton("Save Timetable", SUCCESS);
        JButton loadBtn = createStyledButton("Load Existing", INFO);
        JButton cancelBtn = createStyledButton("Cancel", ERROR);
        
        saveBtn.addActionListener(e -> {
            saveTimetable(branchField.getText(), (Integer)semesterSpinner.getValue(), model);
            dialog.dispose();
        });
        
        loadBtn.addActionListener(e -> {
            loadTimetableIntoTable(branchField.getText(), (Integer)semesterSpinner.getValue(), model);
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        btnPanel.add(saveBtn);
        btnPanel.add(loadBtn);
        btnPanel.add(cancelBtn);
        
        panel.add(topPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void saveTimetable(String branch, int semester, DefaultTableModel model) {
        log("Saving timetable for " + branch + " - Semester " + semester);
        
        JSONArray periods = new JSONArray();
        String[] days = {"monday", "tuesday", "wednesday", "thursday", "friday", "saturday"};
        
        for (int row = 0; row < model.getRowCount(); row++) {
            JSONObject period = new JSONObject();
            period.put("periodNumber", row + 1);
            period.put("startTime", (8 + row) + ":00");
            period.put("endTime", (9 + row) + ":00");
            
            for (int col = 0; col < days.length; col++) {
                String subject = (String) model.getValueAt(row, col + 1);
                if (subject != null && !subject.trim().isEmpty()) {
                    JSONObject dayData = new JSONObject();
                    dayData.put("subject", subject);
                    dayData.put("room", "");
                    dayData.put("teacher", "");
                    period.put(days[col], dayData);
                }
            }
            periods.put(period);
        }
        
        JSONObject timetable = new JSONObject();
        timetable.put("branch", branch);
        timetable.put("semester", semester);
        timetable.put("periods", periods);
        
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/timetable-table", timetable.toString());
            }
            protected void done() {
                try {
                    String response = get();
                    log("Timetable saved successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Timetable saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void loadTimetableIntoTable(String branch, int semester, DefaultTableModel model) {
        log("Loading timetable for " + branch + " - Semester " + semester);
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/timetable-table/" + branch + "/" + semester);
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        JSONObject json = new JSONObject(response);
                        if (json.optBoolean("success")) {
                            JSONObject timetable = json.getJSONObject("timetable");
                            JSONArray periods = timetable.getJSONArray("periods");
                            
                            String[] days = {"monday", "tuesday", "wednesday", "thursday", "friday", "saturday"};
                            for (int i = 0; i < periods.length() && i < model.getRowCount(); i++) {
                                JSONObject period = periods.getJSONObject(i);
                                for (int j = 0; j < days.length; j++) {
                                    if (period.has(days[j])) {
                                        JSONObject dayData = period.getJSONObject(days[j]);
                                        model.setValueAt(dayData.optString("subject"), i, j + 1);
                                    }
                                }
                            }
                            log("Timetable loaded successfully!");
                        }
                    }
                } catch (Exception e) {
                    log("Error loading timetable: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showAssignClassrooms() {
        JDialog dialog = new JDialog(this, "Assign Classrooms to WiFi", true);
        dialog.setSize(700, 500);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        String[] columns = {"Classroom", "Branch", "Semester", "BSSID", "WiFi Name"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);
        table.setRowHeight(30);
        
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        JTextField classroomField = new JTextField();
        JTextField branchField = new JTextField();
        JTextField semesterField = new JTextField();
        JTextField bssidField = new JTextField();
        JTextField wifiNameField = new JTextField();
        
        inputPanel.add(new JLabel("Classroom:"));
        inputPanel.add(classroomField);
        inputPanel.add(new JLabel("Branch:"));
        inputPanel.add(branchField);
        inputPanel.add(new JLabel("Semester:"));
        inputPanel.add(semesterField);
        inputPanel.add(new JLabel("BSSID:"));
        inputPanel.add(bssidField);
        inputPanel.add(new JLabel("WiFi Name:"));
        inputPanel.add(wifiNameField);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton addBtn = createStyledButton("Add Mapping", SUCCESS);
        JButton saveBtn = createStyledButton("Save All", PRIMARY);
        JButton loadBtn = createStyledButton("Load Existing", INFO);
        
        addBtn.addActionListener(e -> {
            model.addRow(new Object[]{
                classroomField.getText(),
                branchField.getText(),
                semesterField.getText(),
                bssidField.getText(),
                wifiNameField.getText()
            });
            classroomField.setText("");
            branchField.setText("");
            semesterField.setText("");
            bssidField.setText("");
            wifiNameField.setText("");
        });
        
        saveBtn.addActionListener(e -> {
            saveClassroomMappings(model);
            dialog.dispose();
        });
        
        loadBtn.addActionListener(e -> loadClassroomMappings(model));
        
        btnPanel.add(addBtn);
        btnPanel.add(saveBtn);
        btnPanel.add(loadBtn);
        
        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void saveClassroomMappings(DefaultTableModel model) {
        JSONArray mappings = new JSONArray();
        for (int i = 0; i < model.getRowCount(); i++) {
            JSONObject mapping = new JSONObject();
            mapping.put("classroom", model.getValueAt(i, 0));
            mapping.put("branch", model.getValueAt(i, 1));
            mapping.put("semester", model.getValueAt(i, 2));
            mapping.put("bssid", model.getValueAt(i, 3));
            mapping.put("wifiName", model.getValueAt(i, 4));
            mappings.put(mapping);
        }
        
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/classrooms/mappings", mappings.toString());
            }
            protected void done() {
                try {
                    log("Classroom mappings saved!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Classroom mappings saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void loadClassroomMappings(DefaultTableModel model) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/classrooms/mappings");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        JSONArray mappings = new JSONArray(response);
                        model.setRowCount(0);
                        for (int i = 0; i < mappings.length(); i++) {
                            JSONObject mapping = mappings.getJSONObject(i);
                            model.addRow(new Object[]{
                                mapping.optString("classroom"),
                                mapping.optString("branch"),
                                mapping.optString("semester"),
                                mapping.optString("bssid"),
                                mapping.optString("wifiName")
                            });
                        }
                        log("Classroom mappings loaded!");
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showTeacherPermissions() {
        JDialog dialog = new JDialog(this, "Teacher Permissions", true);
        dialog.setSize(700, 500);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        String[] columns = {"Teacher ID", "Name", "Can Edit Timetable", "Can View Attendance", "Department"};
        DefaultTableModel model = new DefaultTableModel(columns, 0) {
            public Class<?> getColumnClass(int column) {
                return column == 2 || column == 3 ? Boolean.class : String.class;
            }
        };
        JTable table = new JTable(model);
        table.setRowHeight(30);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton loadBtn = createStyledButton("Load Teachers", INFO);
        JButton saveBtn = createStyledButton("Save Permissions", SUCCESS);
        
        loadBtn.addActionListener(e -> loadTeacherPermissions(model));
        saveBtn.addActionListener(e -> {
            saveTeacherPermissions(model);
            dialog.dispose();
        });
        
        btnPanel.add(loadBtn);
        btnPanel.add(saveBtn);
        
        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void loadTeacherPermissions(DefaultTableModel model) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/profiles/teachers");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        JSONArray teachers = new JSONArray(response);
                        model.setRowCount(0);
                        for (int i = 0; i < teachers.length(); i++) {
                            JSONObject teacher = teachers.getJSONObject(i);
                            model.addRow(new Object[]{
                                teacher.optString("teacherId"),
                                teacher.optString("name"),
                                teacher.optBoolean("canEditTimetable"),
                                teacher.optBoolean("canViewAttendance"),
                                teacher.optString("department")
                            });
                        }
                        log("Teacher permissions loaded!");
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void saveTeacherPermissions(DefaultTableModel model) {
        JSONArray teachers = new JSONArray();
        for (int i = 0; i < model.getRowCount(); i++) {
            JSONObject teacher = new JSONObject();
            teacher.put("teacherId", model.getValueAt(i, 0));
            teacher.put("canEditTimetable", model.getValueAt(i, 2));
            teacher.put("canViewAttendance", model.getValueAt(i, 3));
            teachers.put(teacher);
        }
        
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/profiles/teachers/permissions", teachers.toString());
            }
            protected void done() {
                try {
                    log("Teacher permissions saved!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Permissions saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showViewTimetables() {
        String branch = JOptionPane.showInputDialog(this, "Enter Branch (e.g., CSE):");
        if (branch != null && !branch.trim().isEmpty()) {
            String semester = JOptionPane.showInputDialog(this, "Enter Semester (1-8):");
            if (semester != null && !semester.trim().isEmpty()) {
                log("Loading timetable for " + branch + " - Semester " + semester);
                new SwingWorker<String, Void>() {
                    protected String doInBackground() {
                        return sendGetRequest("/api/timetable-table/" + branch + "/" + semester);
                    }
                    protected void done() {
                        try {
                            String response = get();
                            if (response != null) {
                                showDataDialog("Timetable: " + branch + " - " + semester, formatJSON(response));
                            }
                        } catch (Exception e) {
                            log("Error: " + e.getMessage());
                        }
                    }
                }.execute();
            }
        }
    }
    
    // ========== ATTENDANCE & MONITORING ==========
    
    private void showLiveMonitoring() {
        log("Opening live monitoring...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/attendance/list");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        showTableDialog("Live Student Monitoring", response, new String[]{
                            "ID", "Name", "Department", "Status", "Time Left", "Room"
                        });
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showAttendanceRecords() {
        JDialog dialog = new JDialog(this, "Attendance Records", true);
        dialog.setSize(800, 600);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JPanel filterPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JTextField studentIdField = new JTextField(15);
        JTextField dateField = new JTextField(10);
        JButton searchBtn = createStyledButton("Search", PRIMARY);
        JButton viewAllBtn = createStyledButton("View All", INFO);
        
        filterPanel.add(new JLabel("Student ID:"));
        filterPanel.add(studentIdField);
        filterPanel.add(new JLabel("Date (YYYY-MM-DD):"));
        filterPanel.add(dateField);
        filterPanel.add(searchBtn);
        filterPanel.add(viewAllBtn);
        
        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        resultArea.setFont(new Font("Consolas", Font.PLAIN, 12));
        JScrollPane scrollPane = new JScrollPane(resultArea);
        
        searchBtn.addActionListener(e -> {
            String studentId = studentIdField.getText();
            String date = dateField.getText();
            searchAttendanceRecords(studentId, date, resultArea);
        });
        
        viewAllBtn.addActionListener(e -> {
            viewAllAttendanceRecords(resultArea);
        });
        
        panel.add(filterPanel, BorderLayout.NORTH);
        panel.add(scrollPane, BorderLayout.CENTER);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void searchAttendanceRecords(String studentId, String date, JTextArea resultArea) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                String endpoint = "/api/attendance/records?";
                if (!studentId.isEmpty()) endpoint += "studentId=" + studentId + "&";
                if (!date.isEmpty()) endpoint += "date=" + date;
                return sendGetRequest(endpoint);
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        resultArea.setText(formatJSON(response));
                    }
                } catch (Exception e) {
                    resultArea.setText("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void viewAllAttendanceRecords(JTextArea resultArea) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/attendance/history");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        resultArea.setText(formatJSON(response));
                    }
                } catch (Exception e) {
                    resultArea.setText("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showGenerateReports() {
        String[] options = {"Daily Report", "Weekly Report", "Monthly Report", "Custom Range"};
        String choice = (String) JOptionPane.showInputDialog(this, 
            "Select Report Type:", "Generate Report", 
            JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
        
        if (choice != null) {
            log("Generating " + choice + "...");
            JOptionPane.showMessageDialog(this, 
                "Report generation feature will export attendance data to Excel/PDF format.", 
                "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    // ========== WIFI & LOCATION ==========
    
    private void showSetBSSID() {
        JDialog dialog = new JDialog(this, "Set BSSID Configuration", true);
        dialog.setSize(600, 400);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JPanel inputPanel = new JPanel(new GridLayout(3, 2, 10, 10));
        JTextField bssidField = new JTextField();
        JTextField locationField = new JTextField();
        JTextField classroomField = new JTextField();
        
        inputPanel.add(new JLabel("BSSID (MAC Address):"));
        inputPanel.add(bssidField);
        inputPanel.add(new JLabel("Location Name:"));
        inputPanel.add(locationField);
        inputPanel.add(new JLabel("Classroom:"));
        inputPanel.add(classroomField);
        
        JTextArea currentBSSIDArea = new JTextArea();
        currentBSSIDArea.setEditable(false);
        currentBSSIDArea.setBorder(BorderFactory.createTitledBorder("Current BSSID Configuration"));
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton setBtn = createStyledButton("Set as Primary", SUCCESS);
        JButton addBtn = createStyledButton("Add to List", INFO);
        JButton loadBtn = createStyledButton("Load Current", PRIMARY);
        
        setBtn.addActionListener(e -> {
            setPrimaryBSSID(bssidField.getText());
            dialog.dispose();
        });
        
        addBtn.addActionListener(e -> {
            addBSSIDToList(locationField.getText(), bssidField.getText(), classroomField.getText());
        });
        
        loadBtn.addActionListener(e -> {
            loadCurrentBSSID(currentBSSIDArea);
        });
        
        btnPanel.add(setBtn);
        btnPanel.add(addBtn);
        btnPanel.add(loadBtn);
        
        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(new JScrollPane(currentBSSIDArea), BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void setPrimaryBSSID(String bssid) {
        log("Setting primary BSSID: " + bssid);
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPutRequest("/api/config/bssid", "{\"bssid\":\"" + bssid + "\"}");
            }
            protected void done() {
                try {
                    log("Primary BSSID updated!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Primary BSSID updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void addBSSIDToList(String name, String bssid, String classroom) {
        log("Adding BSSID: " + name);
        JSONObject data = new JSONObject();
        data.put("name", name);
        data.put("bssid", bssid);
        data.put("classroom", classroom);
        
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/config/bssid-list", data.toString());
            }
            protected void done() {
                try {
                    log("BSSID added to list!");
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void loadCurrentBSSID(JTextArea area) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                String current = sendGetRequest("/api/config/bssid");
                String list = sendGetRequest("/api/config/bssid-list");
                return "CURRENT BSSID:\n" + formatJSON(current) + "\n\nALL BSSIDs:\n" + formatJSON(list);
            }
            protected void done() {
                try {
                    area.setText(get());
                } catch (Exception e) {
                    area.setText("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showClassroomWiFiMap() {
        log("Loading classroom WiFi map...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/classrooms/mappings");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        showDataDialog("Classroom WiFi Map", formatJSON(response));
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    // ========== COMMUNICATION ==========
    
    private void showPostNotice() {
        JDialog dialog = new JDialog(this, "Post Notice", true);
        dialog.setSize(600, 500);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JPanel inputPanel = new JPanel(new GridLayout(4, 2, 10, 10));
        JTextField titleField = new JTextField();
        JComboBox<String> categoryCombo = new JComboBox<>(new String[]{
            "General", "Academic", "Event", "Holiday", "Urgent", "Exam"
        });
        JComboBox<String> targetCombo = new JComboBox<>(new String[]{
            "All", "Students", "Teachers", "Specific Branch", "Specific Semester"
        });
        JTextField targetValueField = new JTextField();
        
        inputPanel.add(new JLabel("Title:"));
        inputPanel.add(titleField);
        inputPanel.add(new JLabel("Category:"));
        inputPanel.add(categoryCombo);
        inputPanel.add(new JLabel("Target Audience:"));
        inputPanel.add(targetCombo);
        inputPanel.add(new JLabel("Target Value (if specific):"));
        inputPanel.add(targetValueField);
        
        JTextArea contentArea = new JTextArea();
        contentArea.setBorder(BorderFactory.createTitledBorder("Notice Content"));
        contentArea.setLineWrap(true);
        contentArea.setWrapStyleWord(true);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton postBtn = createStyledButton("Post Notice", SUCCESS);
        JButton cancelBtn = createStyledButton("Cancel", ERROR);
        
        postBtn.addActionListener(e -> {
            JSONObject notice = new JSONObject();
            notice.put("title", titleField.getText());
            notice.put("content", contentArea.getText());
            notice.put("category", categoryCombo.getSelectedItem());
            notice.put("target", targetCombo.getSelectedItem());
            notice.put("targetValue", targetValueField.getText());
            notice.put("postedBy", "Admin");
            notice.put("postedAt", new Date().toString());
            
            postNotice(notice);
            dialog.dispose();
        });
        
        cancelBtn.addActionListener(e -> dialog.dispose());
        
        btnPanel.add(postBtn);
        btnPanel.add(cancelBtn);
        
        panel.add(inputPanel, BorderLayout.NORTH);
        panel.add(new JScrollPane(contentArea), BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void postNotice(JSONObject notice) {
        log("Posting notice: " + notice.optString("title"));
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/notices", notice.toString());
            }
            protected void done() {
                try {
                    log("Notice posted successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Notice posted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showViewNotices() {
        log("Loading all notices...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/notices");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        showTableDialog("All Notices", response, new String[]{
                            "Title", "Category", "Target", "Posted By", "Date"
                        });
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showCommunityForum() {
        JDialog dialog = new JDialog(this, "Community Forum", true);
        dialog.setSize(800, 600);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JTextArea forumArea = new JTextArea();
        forumArea.setEditable(false);
        forumArea.setFont(new Font("Segoe UI", Font.PLAIN, 13));
        forumArea.setLineWrap(true);
        forumArea.setWrapStyleWord(true);
        
        JPanel inputPanel = new JPanel(new BorderLayout(5, 5));
        JTextField messageField = new JTextField();
        JButton postBtn = createStyledButton("Post Message", PRIMARY);
        JButton refreshBtn = createStyledButton("Refresh", INFO);
        
        postBtn.addActionListener(e -> {
            String message = messageField.getText();
            if (!message.trim().isEmpty()) {
                postForumMessage(message);
                messageField.setText("");
                loadForumMessages(forumArea);
            }
        });
        
        refreshBtn.addActionListener(e -> loadForumMessages(forumArea));
        
        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        btnPanel.add(postBtn);
        btnPanel.add(refreshBtn);
        
        inputPanel.add(new JLabel("Message:"), BorderLayout.WEST);
        inputPanel.add(messageField, BorderLayout.CENTER);
        inputPanel.add(btnPanel, BorderLayout.EAST);
        
        panel.add(new JScrollPane(forumArea), BorderLayout.CENTER);
        panel.add(inputPanel, BorderLayout.SOUTH);
        
        loadForumMessages(forumArea);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void postForumMessage(String message) {
        JSONObject post = new JSONObject();
        post.put("message", message);
        post.put("postedBy", "Admin");
        post.put("timestamp", new Date().toString());
        
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/forum/messages", post.toString());
            }
            protected void done() {
                try {
                    log("Forum message posted!");
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void loadForumMessages(JTextArea area) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/forum/messages");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        JSONArray messages = new JSONArray(response);
                        StringBuilder sb = new StringBuilder();
                        for (int i = 0; i < messages.length(); i++) {
                            JSONObject msg = messages.getJSONObject(i);
                            sb.append("[").append(msg.optString("postedBy")).append("] ");
                            sb.append(msg.optString("timestamp")).append("\n");
                            sb.append(msg.optString("message")).append("\n\n");
                        }
                        area.setText(sb.toString());
                    }
                } catch (Exception e) {
                    area.setText("Error loading messages: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    // ========== LIBRARY ==========
    
    private void showLibraryAccess() {
        JDialog dialog = new JDialog(this, "Library Access Management", true);
        dialog.setSize(700, 500);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        String[] columns = {"Student ID", "Name", "Book ID", "Book Title", "Issue Date", "Return Date", "Status"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);
        table.setRowHeight(30);
        
        JPanel btnPanel = new JPanel(new FlowLayout());
        JButton issueBtn = createStyledButton("Issue Book", SUCCESS);
        JButton returnBtn = createStyledButton("Return Book", INFO);
        JButton viewBtn = createStyledButton("View All", PRIMARY);
        
        issueBtn.addActionListener(e -> showIssueBookDialog());
        returnBtn.addActionListener(e -> showReturnBookDialog());
        viewBtn.addActionListener(e -> loadLibraryRecords(model));
        
        btnPanel.add(issueBtn);
        btnPanel.add(returnBtn);
        btnPanel.add(viewBtn);
        
        panel.add(new JScrollPane(table), BorderLayout.CENTER);
        panel.add(btnPanel, BorderLayout.SOUTH);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void showIssueBookDialog() {
        JPanel panel = new JPanel(new GridLayout(4, 2, 10, 10));
        JTextField studentIdField = new JTextField();
        JTextField bookIdField = new JTextField();
        JTextField bookTitleField = new JTextField();
        JTextField dueDateField = new JTextField(new java.text.SimpleDateFormat("yyyy-MM-dd")
            .format(new Date(System.currentTimeMillis() + 14L * 24 * 60 * 60 * 1000)));
        
        panel.add(new JLabel("Student ID:"));
        panel.add(studentIdField);
        panel.add(new JLabel("Book ID:"));
        panel.add(bookIdField);
        panel.add(new JLabel("Book Title:"));
        panel.add(bookTitleField);
        panel.add(new JLabel("Due Date:"));
        panel.add(dueDateField);
        
        int result = JOptionPane.showConfirmDialog(this, panel, "Issue Book", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            JSONObject issue = new JSONObject();
            issue.put("studentId", studentIdField.getText());
            issue.put("bookId", bookIdField.getText());
            issue.put("bookTitle", bookTitleField.getText());
            issue.put("issueDate", new Date().toString());
            issue.put("dueDate", dueDateField.getText());
            issue.put("status", "Issued");
            
            issueBook(issue);
        }
    }
    
    private void showReturnBookDialog() {
        String bookId = JOptionPane.showInputDialog(this, "Enter Book ID to return:");
        if (bookId != null && !bookId.trim().isEmpty()) {
            returnBook(bookId);
        }
    }
    
    private void issueBook(JSONObject issue) {
        log("Issuing book: " + issue.optString("bookTitle"));
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPostRequest("/api/library/issue", issue.toString());
            }
            protected void done() {
                try {
                    log("Book issued successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Book issued successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void returnBook(String bookId) {
        log("Returning book: " + bookId);
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendPutRequest("/api/library/return/" + bookId, "{}");
            }
            protected void done() {
                try {
                    log("Book returned successfully!");
                    JOptionPane.showMessageDialog(AdvancedAdminPanel.this, 
                        "Book returned successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void loadLibraryRecords(DefaultTableModel model) {
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                return sendGetRequest("/api/library/records");
            }
            protected void done() {
                try {
                    String response = get();
                    if (response != null) {
                        JSONArray records = new JSONArray(response);
                        model.setRowCount(0);
                        for (int i = 0; i < records.length(); i++) {
                            JSONObject record = records.getJSONObject(i);
                            model.addRow(new Object[]{
                                record.optString("studentId"),
                                record.optString("studentName"),
                                record.optString("bookId"),
                                record.optString("bookTitle"),
                                record.optString("issueDate"),
                                record.optString("dueDate"),
                                record.optString("status")
                            });
                        }
                        log("Library records loaded!");
                    }
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showResourceManagement() {
        JOptionPane.showMessageDialog(this, 
            "Resource Management:\n" +
            "- Add/Remove Books\n" +
            "- Manage Digital Resources\n" +
            "- Track Resource Usage\n" +
            "- Generate Reports\n\n" +
            "Feature coming soon!", 
            "Resource Management", JOptionPane.INFORMATION_MESSAGE);
    }
    
    // ========== SYSTEM ==========
    
    private void showStatistics() {
        log("Loading statistics...");
        new SwingWorker<String, Void>() {
            protected String doInBackground() {
                StringBuilder stats = new StringBuilder();
                stats.append("=== SYSTEM STATISTICS ===\n\n");
                
                String health = sendGetRequest("/api/health");
                if (health != null) {
                    stats.append("Server Health:\n").append(formatJSON(health)).append("\n\n");
                }
                
                String students = sendGetRequest("/api/attendance/list");
                if (students != null) {
                    stats.append("Active Students:\n").append(formatJSON(students)).append("\n\n");
                }
                
                return stats.toString();
            }
            protected void done() {
                try {
                    showDataDialog("System Statistics", get());
                } catch (Exception e) {
                    log("Error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void showSettings() {
        JDialog dialog = new JDialog(this, "Settings", true);
        dialog.setSize(500, 400);
        dialog.setLocationRelativeTo(this);
        
        JPanel panel = new JPanel(new GridLayout(6, 2, 10, 10));
        panel.setBorder(new EmptyBorder(20, 20, 20, 20));
        
        JTextField serverField = new JTextField(SERVER_URL);
        JSpinner refreshSpinner = new JSpinner(new SpinnerNumberModel(5, 1, 60, 1));
        JCheckBox autoRefreshCheck = new JCheckBox("Auto Refresh", true);
        JCheckBox soundCheck = new JCheckBox("Sound Notifications", false);
        
        panel.add(new JLabel("Server URL:"));
        panel.add(serverField);
        panel.add(new JLabel("Refresh Interval (sec):"));
        panel.add(refreshSpinner);
        panel.add(new JLabel("Auto Refresh:"));
        panel.add(autoRefreshCheck);
        panel.add(new JLabel("Sound Alerts:"));
        panel.add(soundCheck);
        
        JButton saveBtn = createStyledButton("Save Settings", SUCCESS);
        JButton testBtn = createStyledButton("Test Connection", PRIMARY);
        
        saveBtn.addActionListener(e -> {
            log("Settings saved");
            dialog.dispose();
        });
        
        testBtn.addActionListener(e -> testConnection());
        
        panel.add(saveBtn);
        panel.add(testBtn);
        
        dialog.add(panel);
        dialog.setVisible(true);
    }
    
    private void refreshAll() {
        log("Refreshing all data...");
        testConnection();
    }
    
    // ========== UTILITY METHODS ==========
    
    private void testConnection() {
        new SwingWorker<Boolean, Void>() {
            protected Boolean doInBackground() {
                try {
                    URL url = new URL(SERVER_URL + "/api/health");
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("GET");
                    conn.setConnectTimeout(3000);
                    int code = conn.getResponseCode();
                    return code == 200;
                } catch (Exception e) {
                    return false;
                }
            }
            protected void done() {
                try {
                    isConnected = get();
                    updateServerStatus(isConnected);
                    if (isConnected) {
                        log("Connected to server: " + SERVER_URL);
                    } else {
                        log("Cannot connect to server");
                    }
                } catch (Exception e) {
                    log("Connection error: " + e.getMessage());
                }
            }
        }.execute();
    }
    
    private void updateServerStatus(boolean connected) {
        isConnected = connected;
        if (connected) {
            serverStatusLabel.setText("* Online");
            serverStatusLabel.setForeground(SUCCESS);
        } else {
            serverStatusLabel.setText("* Offline");
            serverStatusLabel.setForeground(ERROR);
        }
    }
    
    private void startAutoRefresh() {
        refreshTimer = new Timer();
        refreshTimer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                if (isConnected) {
                    SwingUtilities.invokeLater(() -> {
                        // Auto-refresh logic here
                    });
                }
            }
        }, 5000, 5000);
    }
    
    private void addFormField(JPanel panel, GridBagConstraints gbc, int row, String label, JComponent field) {
        gbc.gridx = 0; gbc.gridy = row; gbc.gridwidth = 1;
        panel.add(new JLabel(label), gbc);
        gbc.gridx = 1;
        panel.add(field, gbc);
    }
    
    private JButton createStyledButton(String text, Color color) {
        JButton btn = new JButton(text);
        btn.setFont(new Font("Segoe UI", Font.BOLD, 13));
        btn.setForeground(Color.WHITE);
        btn.setBackground(color);
        btn.setBorder(new EmptyBorder(10, 20, 10, 20));
        btn.setFocusPainted(false);
        btn.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
        btn.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                btn.setBackground(color.darker());
            }
            public void mouseExited(MouseEvent e) {
                btn.setBackground(color);
            }
        });
        
        return btn;
    }
    
    private void showDataDialog(String title, String data) {
        JDialog dialog = new JDialog(this, title, false);
        dialog.setSize(700, 500);
        dialog.setLocationRelativeTo(this);
        
        JTextArea textArea = new JTextArea(data);
        textArea.setFont(new Font("Consolas", Font.PLAIN, 12));
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        
        JScrollPane scroll = new JScrollPane(textArea);
        dialog.add(scroll);
        dialog.setVisible(true);
    }
    
    private void showTableDialog(String title, String jsonData, String[] columns) {
        JDialog dialog = new JDialog(this, title, false);
        dialog.setSize(900, 600);
        dialog.setLocationRelativeTo(this);
        
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        JTable table = new JTable(model);
        table.setRowHeight(30);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        
        try {
            JSONObject json = new JSONObject(jsonData);
            JSONArray items = json.optJSONArray("students");
            if (items == null) items = json.optJSONArray("teachers");
            if (items == null) items = json.optJSONArray("notices");
            if (items == null) items = new JSONArray(jsonData);
            
            for (int i = 0; i < items.length(); i++) {
                JSONObject item = items.getJSONObject(i);
                Object[] row = new Object[columns.length];
                // Populate row based on available data
                model.addRow(row);
            }
        } catch (Exception e) {
            log("Error parsing table data: " + e.getMessage());
        }
        
        JScrollPane scroll = new JScrollPane(table);
        dialog.add(scroll);
        dialog.setVisible(true);
    }
    
    private void log(String message) {
        SwingUtilities.invokeLater(() -> {
            String timestamp = new java.text.SimpleDateFormat("HH:mm:ss").format(new Date());
            logArea.append("[" + timestamp + "] " + message + "\n");
            logArea.setCaretPosition(logArea.getDocument().getLength());
        });
        statusLabel.setText(message);
    }
    
    // Network Methods
    private String sendGetRequest(String endpoint) {
        try {
            URL url = new URL(SERVER_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();
                return response.toString();
            }
        } catch (Exception e) {
            log("GET Error: " + e.getMessage());
        }
        return null;
    }
    
    private String sendPostRequest(String endpoint, String jsonData) {
        try {
            URL url = new URL(SERVER_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);
            conn.setConnectTimeout(5000);
            
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonData.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200 || responseCode == 201) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();
                return response.toString();
            }
        } catch (Exception e) {
            log("POST Error: " + e.getMessage());
        }
        return null;
    }
    
    private String sendPutRequest(String endpoint, String jsonData) {
        try {
            URL url = new URL(SERVER_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("PUT");
            conn.setRequestProperty("Content-Type", "application/json");
            conn.setDoOutput(true);
            conn.setConnectTimeout(5000);
            
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = jsonData.getBytes("utf-8");
                os.write(input, 0, input.length);
            }
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();
                return response.toString();
            }
        } catch (Exception e) {
            log("PUT Error: " + e.getMessage());
        }
        return null;
    }
    
    private String sendDeleteRequest(String endpoint) {
        try {
            URL url = new URL(SERVER_URL + endpoint);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("DELETE");
            conn.setConnectTimeout(5000);
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = in.readLine()) != null) {
                    response.append(line);
                }
                in.close();
                return response.toString();
            }
        } catch (Exception e) {
            log("DELETE Error: " + e.getMessage());
        }
        return null;
    }
    
    private String formatJSON(String json) {
        try {
            JSONObject obj = new JSONObject(json);
            return obj.toString(2);
        } catch (Exception e) {
            try {
                JSONArray arr = new JSONArray(json);
                return arr.toString(2);
            } catch (Exception ex) {
                return json;
            }
        }
    }
}
