package com.example.letsbunk

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager 
import android.net.wifi.WifiManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.View
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.tabs.TabLayout

class MainActivity : AppCompatActivity() {

    private lateinit var timerTextView: TextView
    private lateinit var connectionStatusTextView: TextView
    private lateinit var wifiBssidTextView: TextView
    private lateinit var markAttendanceButton: Button
    private lateinit var userNameTextView: TextView
    private lateinit var wifiManager: WifiManager
    private lateinit var teacherView: LinearLayout
    private lateinit var studentView: LinearLayout
    private lateinit var attendanceRecyclerView: RecyclerView
    private lateinit var attendanceAdapter: AttendanceAdapter
    
    // Timetable related views
    private lateinit var teacherTabLayout: TabLayout
    private lateinit var attendanceSection: LinearLayout
    private lateinit var timetableSection: LinearLayout
    private lateinit var timetableRecyclerView: RecyclerView
    private lateinit var timetableAdapter: TimetableAdapter
    private lateinit var branchSpinner: Spinner
    private lateinit var semesterSpinner: Spinner
    private lateinit var addTimeSlotButton: Button
    private lateinit var timeSlotEditor: androidx.cardview.widget.CardView

    private val handler = Handler(Looper.getMainLooper())
    private var isRunning = false
    private var seconds = 600 // 10 minutes
    private val TIMER_INTERVAL = 1000L // 1 second
    private val TARGET_BSSID = "78:90:a2:ea:ea:3c" // Authorized Wi-Fi MAC address
    private var isConnectedToAuthorizedWifi = false
    private var userName = ""
    private var wasRunning = false // To track if timer was running before disconnection
    private var isStudent = false // To track user role
    private lateinit var runnable: Runnable

    private val locationPermissions = arrayOf(
        Manifest.permission.ACCESS_FINE_LOCATION,
        Manifest.permission.ACCESS_COARSE_LOCATION
    )

    companion object {
        private const val PERMISSION_REQUEST_CODE = 100
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
        initializeViews()
        setupRecyclerView()
        setupTimetableViews()
        setupTabLayout()
        setupClickListeners()
        checkPermissions()
        initTimer()
        
        // Show role selection dialog immediately
        showRoleSelectionDialog()
    }

    private fun initializeViews() {
        timerTextView = findViewById(R.id.timerTextView)
        connectionStatusTextView = findViewById(R.id.connectionStatusTextView)
        wifiBssidTextView = findViewById(R.id.wifiBssidTextView)
        markAttendanceButton = findViewById(R.id.markAttendanceButton)
        userNameTextView = findViewById(R.id.userNameTextView)
        teacherView = findViewById(R.id.teacherView)
        studentView = findViewById(R.id.studentView)

        // Initialize timetable views
        teacherTabLayout = findViewById(R.id.teacherTabLayout)
        attendanceSection = findViewById(R.id.attendanceSection)
        timetableSection = findViewById(R.id.timetableSection)
        timetableRecyclerView = findViewById(R.id.timetableRecyclerView)
        branchSpinner = findViewById(R.id.branchSpinner)
        semesterSpinner = findViewById(R.id.semesterSpinner)
        addTimeSlotButton = findViewById(R.id.addTimeSlotButton)
        timeSlotEditor = findViewById(R.id.timeSlotEditor)
    }

    private fun setupRecyclerView() {
        attendanceAdapter = AttendanceAdapter()
        attendanceRecyclerView.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = attendanceAdapter
        }
    }

    private fun setupTimetableViews() {
        // Setup RecyclerView
        timetableAdapter = TimetableAdapter(mutableListOf()) { timeSlot ->
            showTimeSlotEditor(timeSlot)
        }
        timetableRecyclerView.apply {
            layoutManager = LinearLayoutManager(this@MainActivity)
            adapter = timetableAdapter
        }

        // Setup Spinners
        setupBranchSpinner()
        setupSemesterSpinner()

        // Setup Add Button
        addTimeSlotButton.setOnClickListener {
            showTimeSlotEditor(null)
        }
    }

    private fun setupTabLayout() {
        teacherTabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {
            override fun onTabSelected(tab: TabLayout.Tab?) {
                when (tab?.position) {
                    0 -> {
                        attendanceSection.visibility = View.VISIBLE
                        timetableSection.visibility = View.GONE
                    }
                    1 -> {
                        attendanceSection.visibility = View.GONE
                        timetableSection.visibility = View.VISIBLE
                    }
                }
            }
            override fun onTabUnselected(tab: TabLayout.Tab?) {}
            override fun onTabReselected(tab: TabLayout.Tab?) {}
        })
    }

    private fun setupBranchSpinner() {
        val branches = arrayOf("CSE", "ECE", "ME", "EE", "Civil")
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, branches)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        branchSpinner.adapter = adapter
        branchSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                updateTimetable()
            }
            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }
    }

    private fun setupSemesterSpinner() {
        val semesters = (1..8).map { "Semester $it" }.toTypedArray()
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, semesters)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        semesterSpinner.adapter = adapter
        semesterSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                updateTimetable()
            }
            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }
    }

    private fun showTimeSlotEditor(timeSlot: TimeSlot?) {
        val dialog = AlertDialog.Builder(this)
            .setView(R.layout.dialog_time_slot_editor)
            .create()

        dialog.show()

        val daySpinner = dialog.findViewById<Spinner>(R.id.daySpinner)
        val startTimeInput = dialog.findViewById<EditText>(R.id.startTimeInput)
        val endTimeInput = dialog.findViewById<EditText>(R.id.endTimeInput)
        val subjectInput = dialog.findViewById<EditText>(R.id.subjectInput)
        val roomInput = dialog.findViewById<EditText>(R.id.roomInput)
        val saveButton = dialog.findViewById<Button>(R.id.saveSlotButton)
        val cancelButton = dialog.findViewById<Button>(R.id.cancelEditButton)

        // Setup day spinner
        val days = arrayOf("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")
        val dayAdapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, days)
        dayAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        daySpinner?.adapter = dayAdapter

        // Pre-fill if editing
        timeSlot?.let {
            daySpinner?.setSelection(getDayPosition(it.day))
            startTimeInput?.setText(it.startTime)
            endTimeInput?.setText(it.endTime)
            subjectInput?.setText(it.subject)
            roomInput?.setText(it.room)
        }

        saveButton?.setOnClickListener {
            val newTimeSlot = TimeSlot(
                id = timeSlot?.id ?: System.currentTimeMillis().toString(),
                day = daySpinner?.selectedItem.toString(),
                startTime = startTimeInput?.text.toString(),
                endTime = endTimeInput?.text.toString(),
                subject = subjectInput?.text.toString(),
                room = roomInput?.text.toString(),
                branch = branchSpinner.selectedItem.toString(),
                semester = semesterSpinner.selectedItem.toString()
            )

            if (timeSlot == null) {
                timetableAdapter.addTimeSlot(newTimeSlot)
            } else {
                timetableAdapter.updateTimeSlot(newTimeSlot)
            }

            dialog.dismiss()
        }

        cancelButton?.setOnClickListener {
            dialog.dismiss()
        }
    }

    private fun getDayPosition(day: String): Int {
        return when (day) {
            "Monday" -> 0
            "Tuesday" -> 1
            "Wednesday" -> 2
            "Thursday" -> 3
            "Friday" -> 4
            "Saturday" -> 5
            else -> 0
        }
    }

    private fun updateTimetable() {
        val branch = branchSpinner.selectedItem.toString()
        val semester = semesterSpinner.selectedItem.toString()
        // Here you would typically load the timetable from a database or server
        // For now, we'll just filter the existing items
        val currentList = timetableAdapter.timeSlots.filter { 
            it.branch == branch && it.semester == semester 
        }
        timetableAdapter.updateTimeSlots(currentList)
    }

    // ... rest of your existing code ...
}